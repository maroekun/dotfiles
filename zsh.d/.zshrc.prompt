# vim:ft=zsh ts=2 sw=2

autoload -Uz vcs_info
autoload -Uz is-at-least
autoload -Uz add-zsh-hook
autoload -Uz colors
colors

zstyle ':vcs_info:*' max-exports 3
zstyle ':vcs_info:*' enable git svn

# General format (for SVN)
zstyle ':vcs_info:*' formats '(%s)-[%b]'
zstyle ':vcs_info:*' actionformats '(%s)-[%b]' '%m' '<!%a>'
zstyle ':vcs_info:svn:*' branchformat '%b:r%r'

zstyle ':vcs_info:git:*' formats '%s \U2b60 %b' '%c%u %m'
zstyle ':vcs_info:git:*' actionformats '%s \U2b60 %b' '%c%u %m' '<!%a>'
zstyle ':vcs_info:git:*' check-for-changes true
# zstyle ':vcs_info:git:*' stagedstr "+"
# zstyle ':vcs_info:git:*' unstagedstr "-"
zstyle ':vcs_info:git:*' stagedstr "✚ "
zstyle ':vcs_info:git:*' unstagedstr "⚠ "

setopt prompt_subst

zstyle ':vcs_info:git+set-message:*' hooks \
  git-hook-begin \
  git-untracked \
  git-push-status \
  git-push-nomerge-branch \
  git-stash-count

function +vi-git-hook-begin() {
  if [[ $(command git rev-parse --is-inside-work-tree 2> /dev/null) != 'true' ]]; then
    return 1
  fi
  return 0
}

function +vi-git-untracked() {
  if [[ "$1" != "1" ]]; then
    return 0
  fi

  if command git status --porcelain 2> /dev/null \
    | awk '{print $1}' \
    | command grep -F '??' > /dev/null 2>&1 ; then
    # hook_com[unstaged]+='?'
    hook_com[unstaged]+='☢ '
  fi
}

function +vi-git-push-status() {
  if [[ "$1" != "1" ]]; then
    return 0
  fi

  # if [[ "${hook_com[branch]}" != "master" ]]; then
  #   return 0
  # fi

  local ahead
  ahead=$(command git rev-list origin/${hook_com[branch]}..${hook_com[branch]} 2> /dev/null | wc -l | tr -d ' ')

  if [[ "$ahead" -gt 0 ]]; then
    hook_com[misc]+="(p${ahead})"
  fi
}

function +vi-git-nomerge-branch() {
  if [[ "$1" != "1" ]]; then
    return 0
  fi

  if [[ "${hook_com[branch]}" == "master" ]]; then
    return 0
  fi

  local nomerged
  nomerged=$(command git rev-list master..${hook_com[branch]} 2> /dev/null | wc -l | tr -d ' ')

  if [[ "$nomerged" -gt 0 ]]; then
    hook_com[misc]+="(m${nomerged})"
  fi
}

function +vi-git-stash-count() {
  if [[ "$1" != "1" ]]; then
    return 0
  fi

  local stash
  stash=$(command git stash list 2> /dev/null | wc -l | tr -d ' ')
  if [[ "${stash}" -gt 0 ]]; then
    hook_com[misc]+="S:${stash}"
  fi
}

p_init() { CURRENT_BG='NONE' }
SEGMENT_SEPARATOR='⮀'

prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG  ]]; then
    echo -n " %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%} "
  else
    echo -n "%{$bg%}%{$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && echo -n $3
}

prompt_context() {
  prompt_segment black default "%(!.%{%F{yellow}%}.)${USER}⟲ ${HOST}"
  prompt_status
}

prompt_dir() {
  prompt_segment blue black '%~'
}

prompt_awsenv() {
  local aws_profile
  if test -z $AWS_PROFILE; then
    aws_profile='\U2716'
  else
    aws_profile=$AWS_PROFILE
  fi

  prompt_segment blue black "AWS \U00a6 ${aws_profile}"
}

prompt_vcs() {
  local -a messages
  local prompt fg bg

  LANG=en_US.UTF-8 vcs_info

  if [[ -z ${vcs_info_msg_0_} ]]; then
    prompt=""
  else
    [[ -n "$vcs_info_msg_0_" ]] && messages+="${vcs_info_msg_0_}" && fg="green"   && bg="black"
    [[ -n "$vcs_info_msg_1_" ]] && [[ "$vcs_info_msg_1_" != " " ]] && messages+="${vcs_info_msg_1_}" && fg="yellow"  && bg="black"
    [[ -n "$vcs_info_msg_2_" ]] && messages+="${vcs_info_msg_2_}" && fg="magenta" && bg="black"
    prompt="${(j: :)messages}"
  fi

  [[ -n "$prompt" ]] && prompt_segment "$fg" "$bg" "$prompt"
}

prompt_clock() {
  now=`date +"%x %T"`
  prompt_segment yellow black "\U23f3 $now"
}

prompt_status() {
  local -a symbol
  symbols+="%(?,%{$fg[green]%},%{$fg[red]%})%(?,✔ ,✖ )"

  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{$fg[cyan]%}⚙"

  # [[ -n "$symbols" ]] && prompt_segment black default "$symbols"
  [[ -n "$symbols" ]] && prompt_segment default default "$symbols"
}

prompt_end() {
  local sep
  [[ -n $1 ]] && sep="$1" || sep="$SEGMENT_SEPARATOR"

  if [[ -n $CURRENT_BG ]]; then
    # echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
    echo -n " %{%k%F{$CURRENT_BG}%}$sep"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}

build_prompt() {
  RETVAL=$?
  p_init
  prompt_dir
  prompt_clock
  prompt_vcs
  prompt_awsenv
  prompt_end
  p_init
  echo -n $'\n'

  prompt_context
  prompt_end '⮁'
}

case ${UID} in
    0)
        ;;
    *)
        PROMPT='%{%f%b%k%}$(build_prompt) '

        # RPROMPTいらない。
        RPROMPT=""
        ;;
esac
