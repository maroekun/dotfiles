# - - - OK - - -
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
# build = 'make -f make_mac.mak'
# hook_post_update = '''
#   if dein#util#_is_windows()
#     let cmd = 'tools\\update-dll-mingw'
#   elseif dein#util#_is_cygwin()
#     let cmd = 'make -f make_cygwin.mak'
#   elseif dein#util#_is_mac()
#     let cmd = 'make -f make_mac.mak'
#   elseif executable('gmake')
#     let cmd = 'gmake'
#   else
#     let cmd = 'make'
#   endif
#   let g:dein#plugin.build = cmd
# '''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
let g:NERDSpaceDelims = 1
nmap <Leader>x <plug>NERDCommenterToggle
vmap <Leader>x <plug>NERDCommenterToggle
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size  = 1
'''

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
let g:quickhl_manual_enable_at_startup = 1
let g:quickhl_manual_keywords = [ "TODO", "CAUTION", "DELETED", "NOTE" ]
nmap <Space>m <Plug>(quickhl-manual-this)
xmap <Space>m <Plug>(quickhl-manual-this)
nmap <Space>M <Plug>(quickhl-manual-reset)
xmap <Space>M <Plug>(quickhl-manual-reset)
nmap <Space>j <Plug>(quickhl-cword-toggle)
'''

[[plugins]]
repo = 'ujihisa/unite-colorscheme'

[[plugins]]
repo = 'kana/vim-smartword'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = '''
nmap <silent> ,s :<C-u>:Switch<CR>
'''

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'airblade/vim-rooter'

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'vim-scripts/Colour-Sampler-Pack'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'rhysd/vim-color-spring-night'

# - - - 途中 - - -

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
nnoremap [unite] <Nop>
nmap ,u [unite]
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -ignorecase -buffer-name=files file<CR>
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
nnoremap <silent> [unite]u :<C-u>Unite buffer file_mru<CR>
nnoremap <silent> [unite]a :<C-u>UniteWithBufferDir -buffer-name=files file buffer file_mru bookmark<CR>
nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
nnoremap <silent> [unite]A :<C-u>UniteBookmarkAdd<CR>
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
call unite#custom#source('file', 'matchers', ['matcher_default', 'matcher_hide_current_file'] )
'''

# NOTE: ここで定義しにくいので .vimrc に直接書いた
# [[plugins]]
# repo = 'itchyny/lightline.vim'
# hook_add = '''
# let g:lightline = {
#   "colorscheme": "wombat",
#   "active": {
#     "left": [ [ "mode", "paste" ], [ "fugitive", "filename"] ]
#   },
#   "component_function": {
#     "fugitive": "%{exists(\"*fugitive#head\") && strlen(fugitive#head()) ? \"⭠ \".fugitive#head() : \"\"}",
#     "readonly": "%{&filetype == \"help\" ? \"\" : &readonly ? \"⭤\" : \"\"}",
#     "modified": "%{&filetype == \"help\" ? \"\" : &modified ? \"+\" : \"\"}",
#     "filename": "%{\"HOGE\"}"
#   },
#   "separator": { "left": "⮀", "right": "⮂" },
#   "subseparator": { "left": "⮁", "right": "⮃" }
# }
# '''

# - - - まだ - - -

# lang
[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
nnoremap <silent> ,gg :<C-u>GitGutterToggle<CR>
nnoremap <silent> ,gh :<C-u>GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
repo = 'tpope/vim-rails'

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'vim-scripts/taglist.vim'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'szw/vim-tags'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_root_markers = ['Gemfile']
let g:ctrlp_lazy_update = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_max_depth = 10
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#auto_completion_start_length = 2
let g:neocomplete#manual_completion_start_length = 0
let g:neocomplete#min_keyword_length = 3
let g:neocomplete#enable_auto_select = 1

inoremap <expr> <C-h> neocomplete#smart_close_popup()."\<C-h>"
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
let g:neosnippet#snippets_directory='~/dotfiles/snippets/'
nnoremap <silent> ,ne :<C-u>NeoSnippetEdit<CR>
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'yuroyoro/yuroyoro256.vim'

[[plugins]]
repo = 'mrkn/mrkn256.vim'

[[plugins]]
repo = 'joshdick/onedark.vim'
